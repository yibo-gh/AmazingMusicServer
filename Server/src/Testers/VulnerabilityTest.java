package Testers;

import Request.Request;

public class VulnerabilityTest {

	public static void main(String[] args) {
		
		/*
		 * System Vulnerability Tests
		 * 1. Invalid email test. 		Expected result: INVALIDEMAIL
		 * 2. Exist id test				Expected result: REG:USEREXISTS
		 * 3. Wrong pw test				Expected result: LOGIN:PWINCORRECT
		 * 4. Registered or not test	Expected result: LOGIN:NOTREG
		 */
		
		validateEmail();
		
		//Wrong pw test
		System.out.println("Wrong pw test");
		PorF(Request.login("ciy@naver.co.kr", "sdfs1d").equals("LOGIN:PWINCORRECT"));
		PorF(Request.login("ci2231y@naver.co.kr", "sdfd132").equals("LOGIN:PWINCORRECT"));
		PorF(Request.login("ci33y@naver.com", "12312s2dlf").equals("LOGIN:PWINCORRECT"));
		
		//Not registered yet
		System.out.println("Not registered yet");
		PorF(Request.login("ciy2@naver.co.kr", "sdfs1d").equals("LOGIN:NOTREG"));
		PorF(Request.login("ci22331y@naver.co.kr", "sdf132").equals("LOGIN:NOTREG"));
		PorF(Request.login("ci323y@naver.com", "12312sdlf").equals("LOGIN:NOTREG"));
		
	}
	
	private static void validateEmail () {
		//Invalid email test
		System.out.println("Invalid email test");
		if (!Request.register("insd..sdf@cosmf.com", "sdf").equals("INVALIDEMAIL")) {
			printError(0x01, "insd..sdf@cosmf.com", "sdf");
			return;
		}
		PorF(Request.register("N#@LKsdlfk.com", "sdf").equals("INVALIDEMAIL")); // Wrong, sharp does do not matters when it is before @
		PorF(Request.register("ciy405*x@kaist.co.kr", "sdf").equals("INVALIDEMAIL")); //Wrong, star does not matters
		PorF(Request.register("cofls@sdnf@ciy.com", "sdf").equals("INVALIDEMAIL"));
		PorF(Request.register("sdf,@naver.com", "sdf").equals("INVALIDEMAIL")); // Check, if comma really illegal
		PorF(Request.login("insd..sdf@cosmf.com", "sdf").equals("INVALIDEMAIL")); // Wrong, does not matters
		PorF(Request.login("N#@LKsdlfk.com", "sdf").equals("INVALIDEMAIL")); // Wrong, again
		PorF(Request.login("ciy405*x@kaist.co.kr", "sdf").equals("INVALIDEMAIL")); //Wrong
		PorF(Request.login("cofls@sdnf@ciy.com", "sdf").equals("INVALIDEMAIL"));
		PorF(Request.login("sdf,@naver.com", "sdf").equals("INVALIDEMAIL")); //Check
		
		System.out.println("Email validator test pass. Countinue.");
		validateID();
	}
	
	private static void validateID() {
		//Exist id test
		System.out.println("Exist id test");
		PorF(Request.register("ciy@naver.co.kr", "sdfsd").equals("UPS"));
		Request.register("ci2231y@naver.co.kr", "123dsf");
		Request.register("ci33y@naver.com", "123dssad");
		PorF(Request.register("ciy@naver.co.kr", "sdfsd").equals("REG:USEREXISTS"));
		PorF(Request.register("ci2231y@naver.co.kr", "sdf132").equals("REG:USEREXISTS"));
		PorF(Request.register("ci33y@naver.com", "12312sdlf").equals("REG:USEREXISTS"));
	}
	
	private static void printError (int i, String e, String p) {
		System.out.print("Test failed at ");
		switch (i) {
		case (0x01): System.out.print("email validator");
		case (0x02): System.out.print("ID validator");
		case (0x03): System.out.print("PS validator");
		case (0x04): System.out.print("registration validator");
		default: System.out.println("invalid function.");
		}
		System.out.println(" with " + e + " & " + p);
		System.out.println("Test terminated with error.");
	}
}
