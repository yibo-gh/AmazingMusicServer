package API;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.ResultSet;
import java.sql.SQLException;

import Object.FileInfo;
import Object.LinkedList;
import Object.User;
import SQLpackage.Database;

public class CoreFunctions {
	
	private static final String dbName = "AmazingMusicDB";
	
	public static String register (LinkedList ll) {
		
		/**
		 * Purpose: for joining to be a member
		 * Input Requirement: Linkedlist which (only) contains User() object. User() is user information. Look at the Object.User class.
		 * Output: Registration status. INVALIDREGINFO, (already) REGISTERED, etc.
		 */
		
		Database db = null;
		ResultSet rs = null;
		
		Object u = ll.head.getInfo();
		if (!u.getClass().equals(new User().getClass()))
			return "INVALIDREGINFO";
		User user = (User) u;
		
		try {
			db = new Database(dbName);
			db.connectDB();
			
			/*
			 * Whether user has already registered ()
			 */
			rs = db.readDB("select pw from userInfo where emailUserName='" + user.getName() + "'");
			if (rs.next()) {
				rs.close();
				db.closeDB();
				return "REGISTERED";
			}
			
			/*
			 * Insert new user information.
			 * File should be match with proper uid (kind of tag).
			 */
			String result = db.updateDB("insert into userInfo (emailUserName, emailDomain, uid, pw) "
								+ "values ('" + user.getName() + "', '" + user.getDomain() + "', '" + (++UID) + "', '" + user.getUserPW() + "')");
			if (result == "UPS") {
				rs.close();
				db.closeDB();
				return "UPS";
			}
			else {
				rs.close();
				db.closeDB();
				return "INSERTFAIL";
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
			
		} finally {
			try {
				if (rs != null) rs.close();
			} catch (SQLException e) {}
			if (db != null) 
				db.closeDB();
		}
		
		return "UNREACHABLE";
	}
	
	public static String login (LinkedList ll) {
		
		/**
		 * Purpose: Login function.
		 * Input Requirement: Linkedlist which (only) contains User() object. User() is user information. Look at the Object.User class.
		 * Output: Login status. INVALIDREGINFO, NOTREGISTERED, PWINCORRECT, etc.
		 * 		   If user successfully logged in, return uid of the user. Uid is generated by register()
		 */
		
		Database db = null;
		ResultSet rs = null;
		
		Object u = ll.head.getInfo();
		if (!u.getClass().equals(new User().getClass()))
			return "INVALIDREGINFO";
		User user = (User) u;
		
		try {
			db = new Database(dbName);
			db.connectDB();
			
			/*
			 * Must have already registered.
			 */
			rs = db.readDB("select pw from userInfo where emailUserName='" + user.getName() + "'");
			if (!rs.next()) {
				rs.close();
				db.closeDB();
				return "NOTREGISTERED";
			}
			
			if (!rs.getString("pw").equals(user.getUserPW())) {
				rs.close();
				db.closeDB();
				return "PWINCORRECT";
			}
			
			/*
			 * return UID: need to modified.
			 */
			rs.close();
			rs = db.readDB("select uid from userInfo where emailUserName='" + user.getName() + "'");
			rs.next();
			String uid = rs.getString("uid");
			
			rs.close();
			db.closeDB();
			return uid;
					
		} catch (SQLException e) {
			e.printStackTrace();
			
		} finally {
			try {
				if (rs != null) rs.close();
			} catch (SQLException e) {}
			if (db != null) 
				db.closeDB();
		}
		
		return "UNREACHABLE";
	}
	
	public static Object upload (LinkedList ll) {
		
		/**
		 * Purpose: GPS(General Purpose Server)-side upload function.
		 * 			Receive a FileInfo() class, and then allow user to upload their file on fileserver.
		 * 			Look at the comment below.
		 * Input Requirement: Linkedlist which (only) contains FileInfo() object.
		 * Output: Upload status. FILEEXISTS, UPS (upload succeed), etc.
		 */
		
		Database db = null;
		ResultSet rs = null;
		
		Object f = ll.head.getInfo();
		if (!f.getClass().equals(new FileInfo().getClass()))
			return "INVALIDFILEINFO";
		FileInfo fInfo = (FileInfo) f;
		
		try {
			db = new Database(dbName);
			db.connectDB();
			
			String uid = fInfo.getUID();
			String oriName = fInfo.getOriName();
			
			String fileSerial = MD5generator(uid+oriName); // Note: need to modify
			String MD5 = MD5generator(oriName); // Note: need to modify
			
			rs = db.readDB("select fileSerial from postfile where fileSerial='" + fileSerial + "'");
			if (rs.next()) {
				rs.close();
				db.closeDB();
				return "FILEEXISTS";
			}
			
			String result = db.updateDB("insert into waitingfile (MD5, fileSerial, uid, oriName) "
					+ "values ('"+MD5 +"', '"+fileSerial+"', '"+uid+"', '"+oriName+"')");
			if (result == "UPS") {
				rs.close();
				db.closeDB();
				return "UPS";
			}
			else {
				rs.close();
				db.closeDB();
				return "INSERTFAIL";
			}

		} catch (SQLException e) {
			e.printStackTrace();

		} finally {
			try {
				if (rs != null) rs.close();
			} catch (SQLException e) {}
			if (db != null) 
				db.closeDB();
		}
		
		return "UNREACHABLE";
	}
}
