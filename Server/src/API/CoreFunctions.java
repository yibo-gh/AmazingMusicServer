package API;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.ResultSet;
import java.sql.SQLException;

import Object.LinkedList;
import Object.User;
import SQLpackage.Database;

public class CoreFunctions {
	
	private static final String dbName = "AmazingMusicDB";
	
	public static String register (LinkedList ll) {
		
		Database db = null;
		ResultSet rs = null;
		
		Object u = ll.head.getInfo();
		if (!u.getClass().equals(new User().getClass()))
			return "INVALIDREGINFO";
		User user = (User) u;
		
		try {
			db = new Database(dbName);
			db.connectDB();
			
			/*
			 * Whether user has already registered ()
			 */
			rs = db.readDB("select pw from userInfo where emailUserName='" + user.getName() + "'");
			if (rs.next()) {
				rs.close();
				db.closeDB();
				return "REGISTERED";
			}
			
			/*
			 * Assign UID
			 */
			rs.close();
			rs = db.readDB("select count(*) as count from userInfo");
			rs.next();
			int uid = rs.getInt("count");// Note: need to be modified
			
			/*
			 * Insert new user information.
			 */
			String result = db.updateDB("insert into userInfo (emailUserName, emailDomain, uid, pw) "
								+ "values ('" + user.getName() + "', '" + user.getDomain() + "', '" + uid + "', '" + user.getUserPW() + "')");
			if (result == "UPS") {
				rs.close();
				db.closeDB();
				return "UPS";
			}
			else {
				rs.close();
				db.closeDB();
				return "INSERTFAIL";
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
			
		} finally {
			try {
				if (rs != null) rs.close();
			} catch (SQLException e) {}
			if (db != null) 
				db.closeDB();
		}
		
		return "UNREACHABLE";
	}
	
	public static String login (LinkedList ll) {
		
		/**
		 * return uid in db, which is generated by register()
		 * File should be match with proper uid (kind of tag).
		 */
		Database db = null;
		ResultSet rs = null;
		
		Object u = ll.head.getInfo();
		if (!u.getClass().equals(new User().getClass()))
			return "INVALIDREGINFO";
		User user = (User) u;
		
		try {
			db = new Database(dbName);
			db.connectDB();
			/*
			 * Must have already registered.
			 */
			rs = db.readDB("select pw from userInfo where emailUserName='" + user.getName() + "'");
			if (!rs.next()) {
				rs.close();
				db.closeDB();
				return "NOTREGISTERED";
			}
			
			if (!rs.getString("pw").equals(user.getUserPW())) {
				rs.close();
				db.closeDB();
				return "PWINCORRECT";
			}
			
			/*
			 * return UID: need to modified.
			 */
			//rs.close();
			//rs = db.readDB("select pw from userInfo where emailUserName='" + user.getName() + "'");
			rs.close();
			db.closeDB();
			return "LOGINSUCCEED";
					
		} catch (SQLException e) {
			e.printStackTrace();
			
		} finally {
			try {
				if (rs != null) rs.close();
			} catch (SQLException e) {}
			if (db != null) 
				db.closeDB();
		}
		
		return "UNREACHABLE";
	}
	
	public static Object upload (LinkedList ll) {
		
		return "DONE";
	}
	
	public static String MD5generator (String plaintext) {
		
		/**
		 * Purpose: to return randomly-looking String by an input String
		 * Input requirement: any String
		 * Output: randomly-looking & (practically but not theoritically) unique
		 */
		
		MessageDigest md;
		try {
			md = MessageDigest.getInstance("MD5");
			md.reset();
			md.update(plaintext.getBytes());
			byte[] digest = md.digest();
			BigInteger bigInt = new BigInteger(1,digest);
			return bigInt.toString(16);
			
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return null;
	}
}
